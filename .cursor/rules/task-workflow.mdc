---
description: タスクの進め方。作業開始前に読むこと。
globs: 
alwaysApply: true
---
以下は、新人エンジニアの方に向けた、Issueドリブンでタスクを進めるための手順書です。Markdown形式になっていますので、そのままドキュメントとして利用できます。

---

# Issueドリブン開発の進め方

## 1. タスク・課題の洗い出し（Issueの作成）
1. **まずはタスクをリストアップ**
   - やるべき作業や解決したい課題を箇条書きで整理します。
   - 既に存在する要望やバグ、不具合なども含めて書き出します。

2. **Issueを作成**
   - タスクや課題ごとに、GitHubリポジトリでIssueを起票します。
   - Issueには「何をしたいか」「なぜ必要か」「完了条件（ゴール）」を明記してください。
     - 例: 「○○機能を追加」「バグ▲▲を修正する」「◇◇をパフォーマンス改善する」など。

3. **優先度を設定（任意）**
   - すぐ着手するもの、保留にするものなど、重要度や締切などから優先度を設定します。
   - ラベルを付けたり、Milestoneを使ったりして管理するとスムーズです。

---

## 2. ブランチの作成
1. **作業用ブランチを作る**
   - `main`や`develop`などのメインブランチから、新規ブランチを切ります。
   - ブランチ名は「issue番号＋概要」がわかる形にすると良いです。
     - 例: `feature/123-add-new-button`、`fix/456-bug-login`など。

2. **Issue番号をコミットに紐付けする（任意）**
   - コミットメッセージに`#Issue番号`を含めると、後で検索が容易になります。
   - 例: `git commit -m "Add new button #123"`

---

## 3. 作業・実装
1. **Issueの内容に沿って実装する**
   - Issueで示したゴールを意識して、必要なファイルやコードを修正・追加します。
   - 小さな単位でコミットを行うと、差分が分かりやすくなります。

2. **適切なコミットメッセージを書く**
   - 何を変更したか、一目でわかるメッセージにしましょう。
   - 例: `Add button component for main page`, `Fix login redirect bug`

3. **テスト・動作確認**
   - 実装が完了したら、ローカル環境やテスト環境で動作チェックします。
   - バグや不具合があれば修正し、再度コミットします。

---

## 4. プルリクエストの作成
1. **Pull Request (PR)を作成**
   - 作業を終えたらGitHub上でPRを作成し、レビューしてもらう準備をします。
   - タイトルには「Issue番号」と「対応内容」を入れます。
     - 例: `[#123] 新規ボタン追加の実装`

2. **PRの本文に内容を詳しく書く**
   - 変更内容・理由・確認手順・関連Issueなどを記載します。
   - 例:
     ```markdown
     ### 変更内容
     - 新規ボタンコンポーネント`Button.tsx`を作成
     - `MainPage.tsx`にボタンを追加して遷移できるように変更

     ### 理由
     - ユーザーがワンクリックで〇〇ページへアクセスできるようにするため

     ### 確認手順
     1. ログイン画面にアクセス
     2. メインページへ遷移
     3. 新規ボタンをクリックすると〇〇ページへ移動する

     ### 関連Issue
     - #123
     ```

3. **レビュワーをアサインし、レビュー依頼**
   - 開発チームメンバーやリードエンジニアにレビューを依頼します。

---

## 5. レビュー・フィードバック対応
1. **レビューコメントを確認**
   - 「ここが分かりにくい」「ロジックを変更してほしい」などの指摘や質問に対応します。

2. **修正が必要な場合は再度コミット**
   - 再度コミットしてプッシュすると、同じPR内に変更が反映されます。
   - レビュワーとコミュニケーションをとりながら修正を進めます。

3. **Approve（承認）後にマージ**
   - レビューで問題なければ、レビュワーからApproveが付きます。
   - レビュワー、または自身の権限でマージし、作業ブランチは削除します。

---

## 6. Issueをクローズ・次のタスクへ
1. **Issueをクローズ**
   - PRがマージされたら、対応したIssueをクローズします。
   - 「解決した内容をIssueにひとこと添える」と、後から参照するときに便利です。

2. **次のタスク・Issueに着手**
   - 優先度の高いタスクや保留になっているIssueを確認し、同様のフローで着手します。

---

# まとめ
- **Issueドリブン開発のポイント**は、「作業を始める前にIssueでタスクを整理する」「作業が終わったらPRを出してレビューを受ける」という流れを徹底することです。
- 作業の流れが一貫していることで、開発履歴が追いやすくなり、チーム間のコミュニケーションも円滑になります。
- ぜひ、上記のステップを参考に、日々の開発を進めてください。
