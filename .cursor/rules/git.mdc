---
description: Gitによるバージョン管理のベストプラクティス。ファイルの編集を行う際に必ず確認し、Gitを使って適切にバージョン管理をしてください。
globs: 
alwaysApply: true
---
## Gitワークフロー
### 作業ブランチの作成と切り替え
作業を行う際は、以下の手順でmainブランチから必ず新しいブランチを作成してから行います：

1. mainブランチに切り替え
   ```bash
   git checkout main
   ```

2. mainブランチを最新状態に更新
   ```bash
   git pull origin main
   ```

3. 作業用ブランチを作成し、そこに切り替える
   ```bash
   git checkout -b Prefix/<作業ブランチ名>
   ```

### コミットの作成
コミットを作成する際は、以下の手順に従います：

1. 変更の確認
   ```bash
   # 未追跡ファイルと変更の確認
   git status

   # 変更内容の詳細確認
   git diff
   ```

2. コミット前の確認事項
   - 変更または追加されたファイルの特定
   - 変更の性質（新機能、バグ修正、リファクタリングなど）の把握
   - 変更内容が大きすぎる場合は、意味ごとにコミットを分割する
   - コミットする際に、可能な場合は `git commit -am` を使用

3. コミットの実行
   ```bash
   # 関連ファイルのみをステージング
   git add <files>

   # コミットメッセージの作成（HEREDOCを使用）
   git commit -m "$(cat <<'EOF'
   Prefix: <変更概要>

   - <「なぜ」に焦点を当てて内容や変更理由を記述>
   EOF
   )"
   ```

### プルリクエストの作成
プルリクエストを作成する際は、以下の手順に従います：

1. ブランチの状態確認
   ```bash
   # 未コミットの変更確認
   git status

   # 変更内容の確認
   git diff

   # mainからの差分確認
   git diff main...HEAD

   # コミット履歴の確認
   git log
   ```

2. 変更の分析
   - mainから分岐後のすべてのコミットの確認
   - 変更の性質と目的の把握
   - プロジェクトへの影響評価
   - 機密情報の有無確認

3. プルリクエストの作成
   ```bash
   # リモートへプッシュ
   git push -u origin <ブランチ名>

   # プルリクエストの作成（HEREDOCを使用）
   gh pr create --title "[Prefix]<タイトル>" --body "$(cat <<'EOF'
   ### 概要
   -

   ### 変更内容
   -

   ### レビューのポイント
   -
   EOF
   )"
   ```

### 命名規則
1. Prefixを付ける箇所
ブランチ名: `Prefix/<ブランチ名>`
コミットメッセージの1行目: `Prefix: <変更概要>`
プルリクエストのタイトル: `[Prefix]<タイトル>`

2. Prefix一覧
   |Prefix|用途|
   |-|-|
   |`feature`| 新機能の追加|
   |`update`| 既存機能の改善|
   |`bugfix`|軽微なバグ修正|
   |`hotfix`|緊急度が高い不具合の修正|
   |`refactor`| リファクタリング|
   |`test`| テストの追加や修正|
   |`docs`| ドキュメントの追加や修正|
   |`chore`|雑務的作業|
